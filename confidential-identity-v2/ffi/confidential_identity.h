#ifndef confidential_identity_ffi_h
#define confidential_identity_ffi_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The data needed to generate a CDD ID.
 */
typedef struct CddClaimData CddClaimData;

typedef struct CddId CddId;

/**
 * The data needed to generate a SCOPE ID.
 */
typedef struct ScopeClaimData ScopeClaimData;

/**
 * Contains the Zero Knowledge proof and the proof of wellformedness.
 * This is the construct that the investors will use to generate
 * claim proofs.
 */
typedef struct ScopeClaimProof ScopeClaimProof;

/**
 * Create a new `CddClaimData` object.
 *
 * Caller is responsible for calling `cdd_claim_data_free()` to deallocate this object.
 *
 * # Safety
 *
 * Caller is also responsible for making sure `investor_did` and
 * `investor_unique_id` point to allocated blocks of memory of `investor_did_size`
 * and `investor_unique_id_size` bytes respectively.
 */
CddClaimData *cdd_claim_data_new(const uint8_t *investor_did,
                                 size_t investor_did_size,
                                 const uint8_t *investor_unique_id,
                                 size_t investor_unique_id_size);

/**
 * Deallocates a `CddClaimData` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `cdd_claim_data_new()`.
 */
void cdd_claim_data_free(CddClaimData *ptr);

/**
 * Create a new `ScopeClaimData` object.
 *
 * Caller is responsible for calling `scope_claim_data_free()` to deallocate this object.
 *
 * # Safety
 *
 * Caller is also responsible for making sure `scope_did` and
 * `investor_unique_id` point to allocated blocks of memory of `scope_did_size`
 * and `investor_unique_id_size` bytes respectively.
 */
ScopeClaimData *scope_claim_data_new(const uint8_t *scope_did,
                                     size_t scope_did_size,
                                     const uint8_t *investor_unique_id,
                                     size_t investor_unique_id_size);

/**
 * Deallocates a `ScopeClaimData` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `scope_claim_data_new()`.
 */
void scope_claim_data_free(ScopeClaimData *ptr);

/**
 * Creates a CDD ID from a CDD claim.
 *
 * # Safety
 *
 * Caller is responsible to make sure `cdd_claim` pointer is a valid
 * `CddClaimData` object, created by this API.
 * Caller is responsible for deallocating memory after use.
 */
CddId *create_cdd_id(const CddClaimData *cdd_claim);

/**
 * Creates a `Signature` from a scope claim proof data and a message.
 *
 * # Safety
 *
 * Caller is responsible to make sure `scope_claim_proof_data` and `message`
 * pointers are valid objects, created by this API, and `message` points to
 * a block of memory that has at least `message_size` bytes.
 * Caller is responsible for deallocating memory after use.
 */
struct ScopeClaimProof *create_scope_claim_proof(const CddClaimData *cdd_claim,
                                                 const ScopeClaimData *scope_claim);

/**
 * Deallocates a `ScopeClaimProof` object's memory.
 *
 * Should only be called on a still-valid pointer to an object returned by
 * `cdd_claim_data_new()`.
 */
void scope_claim_proof_free(struct ScopeClaimProof *ptr);

/**
 * Verifies the signature on a message.
 *
 * # Safety
 *
 * Caller is responsible to make sure `proof_public_key`, `message`, and `signature`
 * pointers are valid objects, created by this API, and `message` points to a block
 * of memory that has at least `message_size` bytes.
 * Caller is responsible for deallocating memory after use.
 */
bool verify_scope_claim_proof(const struct ScopeClaimProof *proof,
                              const uint8_t *investor_did,
                              size_t investor_did_size,
                              const uint8_t *scope_did,
                              size_t scope_did_size,
                              const CddId *cdd_id);

#endif /* confidential_identity_ffi_h */
